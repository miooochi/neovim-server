#  _   _                 _             ____
# | \ | | ___  _____   _(_)_ __ ___   / ___|  ___ _ ____   _____ _ __
# |  \| |/ _ \/ _ \ \ / / | '_ ` _ \  \___ \ / _ \ '__\ \ / / _ \ '__|
# | |\  |  __/ (_) \ V /| | | | | | |  ___) |  __/ |   \ V /  __/ |
# |_| \_|\___|\___/ \_/ |_|_| |_| |_| |____/ \___|_|    \_/ \___|_|
#
# https://github.com/yqlbu/neovim-server
#
# Copyright (C) 2020-2021 yqlbu <https://hikariai.net>
#
# This is a open-source software, liscensed under the MIT License.
# See /License for more information.

name: Test Builds
# Controls when the action will run.
on:
  push:
    tags:
      - "*"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "multi-arch build"
  multi-arch-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Get current tag version and pass it as environment variable
      - name: Set environment variable
        run: |
          echo "IMAGE=nvim-server" >> $GITHUB_ENV
          echo "DOCKERHUB_REGISTRY=hikariai" >> $GITHUB_ENV
          echo "GITHUB_REGISTRY=ghcr.io" >> $GITHUB_ENV
          echo "GITHUB_PKG_REPOSITORY=yqlbu/nvim-server" >> $GITHUB_ENV
          echo "TAG=test" >> $GITHUB_ENV
      # The docker/setup-qemu action installs QEMU static binaries, which are used to run builders for architectures other than the host.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      # The docker/setup-buildx action configures buildx, which is a Docker CLI plugin that provides enhanced build capabilities.
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Login to DockerHub
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_SECRET }}

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      # Print Architecture
      - name: Print the current system architecture
        run: |
          echo $(dpkg --print-architecture)

      # Build and Push the images
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./containers/test/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}
            ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_PKG_REPOSITORY }}:${{ env.TAG }}
